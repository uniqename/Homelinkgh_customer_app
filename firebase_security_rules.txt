// Firestore Security Rules for HomeLinkGH
// Copy these rules to your Firebase Console > Firestore Database > Rules

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isProvider() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'provider';
    }
    
    function isCustomer() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['customer', 'diaspora'];
    }
    
    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isValidGhanaPhone(phone) {
      return phone.matches('^\\+233[0-9]{9}$');
    }
    
    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated() && (isOwner(userId) || isAdmin());
      allow write: if isAuthenticated() && (isOwner(userId) || isAdmin()) 
                   && request.resource.data.keys().hasAll(['name', 'email', 'phoneNumber', 'role'])
                   && isValidGhanaPhone(request.resource.data.phoneNumber);
      allow create: if isAuthenticated() && isOwner(userId)
                    && request.resource.data.keys().hasAll(['name', 'email', 'phoneNumber', 'role'])
                    && isValidGhanaPhone(request.resource.data.phoneNumber);
    }
    
    // Providers collection  
    match /providers/{providerId} {
      allow read: if true; // Public read for all providers
      allow write: if isAuthenticated() && (isOwner(providerId) || isAdmin());
      allow create: if isAuthenticated() && isOwner(providerId)
                    && request.resource.data.keys().hasAll(['name', 'services', 'phoneNumber', 'email'])
                    && isValidGhanaPhone(request.resource.data.phoneNumber)
                    && request.resource.data.services is list
                    && request.resource.data.services.size() > 0;
    }
    
    // Bookings collection
    match /bookings/{bookingId} {
      allow read: if isAuthenticated() && 
                  (isOwner(resource.data.customerId) || 
                   isOwner(resource.data.providerId) || 
                   isAdmin());
      allow create: if isAuthenticated() && isCustomer()
                    && request.resource.data.customerId == request.auth.uid
                    && request.resource.data.keys().hasAll(['customerId', 'providerId', 'serviceType', 'scheduledDate', 'address', 'price'])
                    && request.resource.data.status == 'pending'
                    && request.resource.data.price >= 0;
      allow update: if isAuthenticated() && 
                    (isOwner(resource.data.customerId) || 
                     isOwner(resource.data.providerId) || 
                     isAdmin())
                    && request.resource.data.customerId == resource.data.customerId
                    && request.resource.data.providerId == resource.data.providerId;
    }
    
    // Reviews collection
    match /reviews/{reviewId} {
      allow read: if true; // Public read for reviews
      allow create: if isAuthenticated() && isCustomer()
                    && request.resource.data.customerId == request.auth.uid
                    && request.resource.data.rating >= 1 
                    && request.resource.data.rating <= 5
                    && request.resource.data.keys().hasAll(['customerId', 'providerId', 'bookingId', 'rating']);
      allow update: if isAuthenticated() && isOwner(resource.data.customerId);
    }
    
    // Analytics collection (write-only for tracking)
    match /analytics/{analyticsId} {
      allow read: if isAdmin();
      allow write: if isAuthenticated();
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      allow read: if isAuthenticated() && isOwner(resource.data.userId);
      allow write: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
    }
    
    // Chat messages (real-time communication)
    match /chats/{chatId}/messages/{messageId} {
      allow read: if isAuthenticated() && 
                  (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
      allow create: if isAuthenticated() && 
                    (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants)
                    && request.resource.data.senderId == request.auth.uid;
    }
    
    // Chat rooms
    match /chats/{chatId} {
      allow read: if isAuthenticated() && 
                  (request.auth.uid in resource.data.participants);
      allow create: if isAuthenticated() && 
                    (request.auth.uid in request.resource.data.participants)
                    && request.resource.data.participants.size() == 2;
    }
    
    // Service requests (for matching)
    match /service_requests/{requestId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.customerId) || isProvider() || isAdmin());
      allow create: if isAuthenticated() && isCustomer() 
                    && request.resource.data.customerId == request.auth.uid;
      allow update: if isAuthenticated() && isOwner(resource.data.customerId);
    }
    
    // Provider applications (for verification)
    match /provider_applications/{applicationId} {
      allow read: if isAuthenticated() && (isOwner(resource.data.userId) || isAdmin());
      allow create: if isAuthenticated() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin(); // Only admins can approve/reject applications
    }
  }
}

// Cloud Storage Security Rules
// Copy these rules to Firebase Console > Storage > Rules

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // User profile images
    match /users/{userId}/profile/{imageId} {
      allow read: if true; // Public read for profile images
      allow write: if request.auth != null && request.auth.uid == userId
                   && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                   && request.resource.contentType.matches('image/.*');
    }
    
    // Provider portfolio images
    match /providers/{providerId}/portfolio/{imageId} {
      allow read: if true; // Public read for portfolio
      allow write: if request.auth != null && request.auth.uid == providerId
                   && request.resource.size < 10 * 1024 * 1024 // 10MB limit
                   && request.resource.contentType.matches('image/.*');
    }
    
    // Provider certification documents
    match /providers/{providerId}/certifications/{documentId} {
      allow read: if request.auth != null && 
                  (request.auth.uid == providerId || 
                   get(/databases/(default)/documents/users/$(request.auth.uid)).data.role == 'admin');
      allow write: if request.auth != null && request.auth.uid == providerId
                   && request.resource.size < 5 * 1024 * 1024 // 5MB limit
                   && request.resource.contentType.matches('(image/.*|application/pdf)');
    }
    
    // Booking-related images (before/after photos)
    match /bookings/{bookingId}/images/{imageId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                   && request.resource.size < 10 * 1024 * 1024 // 10MB limit
                   && request.resource.contentType.matches('image/.*');
    }
    
    // Chat images/files
    match /chats/{chatId}/files/{fileId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null
                   && request.resource.size < 20 * 1024 * 1024; // 20MB limit
    }
  }
}